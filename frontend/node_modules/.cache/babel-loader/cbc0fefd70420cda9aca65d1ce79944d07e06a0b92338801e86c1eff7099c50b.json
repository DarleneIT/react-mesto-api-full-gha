{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n  _request(path, method, data) {\n    let body = data;\n    if ((method === 'PATCH' || method === 'POST') && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: this._headers,\n      body\n    }).then(this._checkResponse);\n  }\n  getUserInfo() {\n    return this._request(`users/me`, 'GET');\n  }\n  getItems() {\n    return this._request(`cards`, 'GET');\n  }\n  setUserInfo(data) {\n    return this._request(`/users/me`, 'PATCH', data);\n  }\n  setAvatar(data) {\n    return this._request(`/users/me/avatar`, 'PATCH', data);\n  }\n  addCard(data) {\n    return this._request(`/cards`, 'POST', data);\n  }\n  deleteCard(id) {\n    return this._request(`/cards/${id}`, 'DELETE');\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._url}cards/${cardId}/likes`, {\n        method: \"PUT\",\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._url}cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        headers: {\n          authorization: this._authorization\n        }\n      }).then(this._checkResponse);\n    }\n  }\n}\nexport const api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  headers: {\n    authorization: \"c9ca397d-f5a3-459e-b811-61b33e0fdb3e\",\n    \"Content-Type\": \"application/json\"\n  }\n});","map":{"version":3,"names":["Api","constructor","options","_url","url","_headers","headers","_authorization","authorization","_checkResponse","res","ok","json","Promise","reject","status","_request","path","method","data","body","JSON","stringify","fetch","then","getUserInfo","getItems","setUserInfo","setAvatar","addCard","deleteCard","id","changeLikeCardStatus","cardId","isLiked","api"],"sources":["/Users/darlene/Desktop/dev/react-mesto-auth/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor(options) {\n    this._url = options.url;\n    this._headers = options.headers;\n    this._authorization = options.headers.authorization;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  _request(path, method, data) {\n    let body = data;\n    if((method === 'PATCH' || method === 'POST') && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: this._headers,\n      body,\n    })\n    .then(this._checkResponse);\n  }\n\n  getUserInfo() {\n    return this._request(`users/me`, 'GET')\n  }\n\n  getItems() {\n    return this._request(`cards`, 'GET')\n  }\n\n  setUserInfo(data) {\n    return this._request(`/users/me`, 'PATCH', data)\n  }\n\n  setAvatar(data) {\n    return this._request(`/users/me/avatar`, 'PATCH', data)\n  }\n\n  addCard(data) {\n    return this._request(`/cards`, 'POST', data)\n  }\n\n  deleteCard(id) {\n    return this._request(`/cards/${id}`, 'DELETE')\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._url}cards/${cardId}/likes`, {\n        method: \"PUT\",\n        headers: {\n          authorization: this._authorization,\n        },\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._url}cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        headers: {\n          authorization: this._authorization,\n        },\n      }).then(this._checkResponse);\n    }\n  }\n}\n\nexport const api = new Api({\n  url: \"https://mesto.nomoreparties.co/v1/cohort-66\",\n  headers: {\n    authorization: \"c9ca397d-f5a3-459e-b811-61b33e0fdb3e\",\n    \"Content-Type\": \"application/json\",\n  },\n});"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,IAAI,GAAGD,OAAO,CAACE,GAAG;IACvB,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,OAAO;IAC/B,IAAI,CAACC,cAAc,GAAGL,OAAO,CAACI,OAAO,CAACE,aAAa;EACrD;EAEAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC/C;EAEAC,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAC3B,IAAIC,IAAI,GAAGD,IAAI;IACf,IAAG,CAACD,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,MAAM,KAAKC,IAAI,EAAE;MACpDC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAC7B;IACA,OAAOI,KAAK,CAAC,IAAI,CAACpB,IAAI,GAAGc,IAAI,EAAE;MAC7BC,MAAM;MACNZ,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBe;IACF,CAAC,CAAC,CACDI,IAAI,CAAC,IAAI,CAACf,cAAc,CAAC;EAC5B;EAEAgB,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACT,QAAQ,CAAE,UAAS,EAAE,KAAK,CAAC;EACzC;EAEAU,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACV,QAAQ,CAAE,OAAM,EAAE,KAAK,CAAC;EACtC;EAEAW,WAAWA,CAACR,IAAI,EAAE;IAChB,OAAO,IAAI,CAACH,QAAQ,CAAE,WAAU,EAAE,OAAO,EAAEG,IAAI,CAAC;EAClD;EAEAS,SAASA,CAACT,IAAI,EAAE;IACd,OAAO,IAAI,CAACH,QAAQ,CAAE,kBAAiB,EAAE,OAAO,EAAEG,IAAI,CAAC;EACzD;EAEAU,OAAOA,CAACV,IAAI,EAAE;IACZ,OAAO,IAAI,CAACH,QAAQ,CAAE,QAAO,EAAE,MAAM,EAAEG,IAAI,CAAC;EAC9C;EAEAW,UAAUA,CAACC,EAAE,EAAE;IACb,OAAO,IAAI,CAACf,QAAQ,CAAE,UAASe,EAAG,EAAC,EAAE,QAAQ,CAAC;EAChD;EAEAC,oBAAoBA,CAACC,MAAM,EAAEC,OAAO,EAAE;IACpC,IAAIA,OAAO,EAAE;MACX,OAAOX,KAAK,CAAE,GAAE,IAAI,CAACpB,IAAK,SAAQ8B,MAAO,QAAO,EAAE;QAChDf,MAAM,EAAE,KAAK;QACbZ,OAAO,EAAE;UACPE,aAAa,EAAE,IAAI,CAACD;QACtB;MACF,CAAC,CAAC,CAACiB,IAAI,CAAC,IAAI,CAACf,cAAc,CAAC;IAC9B,CAAC,MAAM;MACL,OAAOc,KAAK,CAAE,GAAE,IAAI,CAACpB,IAAK,SAAQ8B,MAAO,QAAO,EAAE;QAChDf,MAAM,EAAE,QAAQ;QAChBZ,OAAO,EAAE;UACPE,aAAa,EAAE,IAAI,CAACD;QACtB;MACF,CAAC,CAAC,CAACiB,IAAI,CAAC,IAAI,CAACf,cAAc,CAAC;IAC9B;EACF;AACF;AAEA,OAAO,MAAM0B,GAAG,GAAG,IAAInC,GAAG,CAAC;EACzBI,GAAG,EAAE,6CAA6C;EAClDE,OAAO,EAAE;IACPE,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}