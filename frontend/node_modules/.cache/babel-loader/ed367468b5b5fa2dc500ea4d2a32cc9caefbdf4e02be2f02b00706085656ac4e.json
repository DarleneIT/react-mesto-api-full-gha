{"ast":null,"code":"class Auth {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  /** универсальный метод запрос с проверкой  */\n  _request(path, method, data) {\n    let body = data;\n    if ((method === \"PATCH\" || method === \"POST\") && data) {\n      body = JSON.stringify(data);\n    }\n    return fetch(this._url + path, {\n      method,\n      headers: this._headers,\n      body\n    }).then(this._checkResponse);\n  }\n  register(data) {\n    return this._request(`/signup`, \"POST\", data);\n  }\n  login(data) {\n    return this._request(`/signin`, \"POST\", data);\n  }\n\n  /** проверем токен */\n  checkToken(jwt) {\n    return fetch(`${this._url}/users/me`, {\n      method: \"GET\",\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${jwt}`\n      }\n    }).then(this._getResponseData);\n  }\n}\nconst auth = new Auth({\n  url: \"https://auth.nomoreparties.co\",\n  /** базовый url */\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport { auth };","map":{"version":3,"names":["Auth","constructor","config","_url","url","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","_request","path","method","data","body","JSON","stringify","fetch","then","register","login","checkToken","jwt","Authorization","_getResponseData","auth"],"sources":["/Users/darlene/Desktop/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["class Auth {\n    constructor(config) {\n      this._url = config.url;\n      this._headers = config.headers;\n    }\n  \n    _checkResponse(res) {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n  \n    /** универсальный метод запрос с проверкой  */\n    _request(path, method, data) {\n      let body = data;\n      if ((method === \"PATCH\" || method === \"POST\") && data) {\n        body = JSON.stringify(data);\n      }\n      return fetch(this._url + path, {\n        method,\n        headers: this._headers,\n        body,\n      })\n      .then(this._checkResponse);\n    }\n  \n    register(data) {\n      return this._request(`/signup`, \"POST\", data);\n    }\n  \n    login(data) {\n      return this._request(`/signin`, \"POST\", data);\n    }\n  \n    /** проверем токен */\n    checkToken(jwt) {\n      return fetch(`${this._url}/users/me`, {\n        method: \"GET\",\n        headers: {\n          ...this._headers,\n          Authorization: `Bearer ${jwt}`,\n        },\n      }).then(this._getResponseData);\n    }\n  }\n  \n  const auth = new Auth({\n    url: \"https://auth.nomoreparties.co\", /** базовый url */\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  \n  export { auth };"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAACC,MAAM,EAAE;IAClB,IAAI,CAACC,IAAI,GAAGD,MAAM,CAACE,GAAG;IACtB,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,OAAO;EAChC;EAEAC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC/C;;EAEA;EACAC,QAAQA,CAACC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAC3B,IAAIC,IAAI,GAAGD,IAAI;IACf,IAAI,CAACD,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,MAAM,KAAKC,IAAI,EAAE;MACrDC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;IAC7B;IACA,OAAOI,KAAK,CAAC,IAAI,CAAClB,IAAI,GAAGY,IAAI,EAAE;MAC7BC,MAAM;MACNV,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBa;IACF,CAAC,CAAC,CACDI,IAAI,CAAC,IAAI,CAACf,cAAc,CAAC;EAC5B;EAEAgB,QAAQA,CAACN,IAAI,EAAE;IACb,OAAO,IAAI,CAACH,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAEG,IAAI,CAAC;EAC/C;EAEAO,KAAKA,CAACP,IAAI,EAAE;IACV,OAAO,IAAI,CAACH,QAAQ,CAAE,SAAQ,EAAE,MAAM,EAAEG,IAAI,CAAC;EAC/C;;EAEA;EACAQ,UAAUA,CAACC,GAAG,EAAE;IACd,OAAOL,KAAK,CAAE,GAAE,IAAI,CAAClB,IAAK,WAAU,EAAE;MACpCa,MAAM,EAAE,KAAK;MACbV,OAAO,EAAE;QACP,GAAG,IAAI,CAACD,QAAQ;QAChBsB,aAAa,EAAG,UAASD,GAAI;MAC/B;IACF,CAAC,CAAC,CAACJ,IAAI,CAAC,IAAI,CAACM,gBAAgB,CAAC;EAChC;AACF;AAEA,MAAMC,IAAI,GAAG,IAAI7B,IAAI,CAAC;EACpBI,GAAG,EAAE,+BAA+B;EAAE;EACtCE,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,SAASuB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}